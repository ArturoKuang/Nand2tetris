// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    //instruction[15] = 1, c instruction
    Not(in=instruction[15], out=aInstruction);
    And(a=instruction[5], b=instruction[15], out=aluToA);

    Mux16(a=instruction, b=comp ,sel=aluToA ,out=adata);
    Or(a=aInstruction, b=aluToA, out=loada);
    ARegister(in=adata ,load=loada ,out=rega, out[0..14]=addressM);
    Mux16(a=rega, b=inM, sel=instruction[12], out=memMD);

    And(a=instruction[15], b=instruction[4], out=aluToD);
    DRegister(in=comp,load=aluToD ,out=regd);
    ALU(x=regd ,y=memMD ,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6] ,out=outM, out=comp ,zr=zr ,ng=ng);

    //if jump PC = A, else inc++
    Not(in=ng, out=isNonNeg);
    Not(in=zr, out=isNonZero);
    And(a=isNonNeg, b=isNonZero, out=isPositive); // is positive? !zero && !negative

    And(a=instruction[15], b=instruction[3], out=writeM);  // write M? isCInstruction && dest==M

    And(a=isPositive, b=instruction[0], out=JGT);
    And(a=zr, b=instruction[1], out=JEQ);
    And(a=ng, b=instruction[2], out=JLT);

    Or(a=JEQ, b=JLT, out=JLE);
    Or(a=JLE, b=JGT, out=jumpToA);                  // is jump?
    And(a=instruction[15], b=jumpToA, out=loadPC);   // loadPC? if(isCInstruction && jump)
    Not(in=loadPC, out=PCinc);
    PC(in=rega, inc=PCinc, load=loadPC, reset=reset, out[0..14]=pc);
}